- name: Setup Machines
  hosts: localhost
  connection: local
  tasks:
    - name: Get docker containers id
      shell: >
        docker ps -q
      register: containers_id

    - name: Get routeurs containers
      shell: >
        docker exec {{ item }} hostname | grep -qE "^tj_routeur" && echo {{ item }}
      ignore_errors: true
      failed_when: false
      register: routeurs_id
      with_items: "{{ containers_id.stdout_lines }}"

    - name: Get hosts containers
      shell: >
        docker exec {{ item }} hostname | grep -qE "^tj_host" && echo {{ item }}
      ignore_errors: true
      failed_when: false
      register: hosts_id
      with_items: "{{ containers_id.stdout_lines }}"

    - name: Log hosts id
      debug:
        msg: "{{ hosts_id.results | map(attribute='stdout_lines') | list | flatten | select('match', '^\\S') | list  }}"

    - name: Log routeurs id
      debug:
        msg: "{{ routeurs_id.results | map(attribute='stdout_lines') | list | flatten | select('match', '^\\S') | list  }}"

    - name: Define hosts ip addresses on eth1
      shell: >
        docker cp PWD/p2/sh/setup_host.sh {{ item }}:/setup_host.sh && \
        docker exec {{ item }} sh /setup_host.sh
      with_items: "{{ hosts_id.results | map(attribute='stdout_lines') | list | flatten | select('match', '^\\S') | list  }}"
    
    - name: Setup routeurs bridge and vxlan [multicast/unicast]
      shell: >
        docker cp PWD/p2/sh/setup_routeur_multicast.sh {{ item }}:/setup_routeur_multicast.sh && \
        docker exec {{ item }} sh /setup_routeur_multicast.sh
      with_items: "{{ routeurs_id.results | map(attribute='stdout_lines') | list | flatten | select('match', '^\\S') | list  }}"